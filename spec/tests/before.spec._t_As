import supertest from 'supertest';
import * as chai from 'chai';
import HttpStatusCodes from 'http-status-codes';
import app from '../../src/index';
import 'mocha';
import redis from 'redis';


describe('Testing Draw Request', () => {
  it('Draw Dcard User', done => supertest(app).get('/api/draw/random')
    .then((res) => {
      // console.log(res.body);
      // eslint-disable-next-line @typescript-eslint/no-unused-expressions
      chai.expect(res.body[0]).to.not.be.undefined;
      // eslint-disable-next-line @typescript-eslint/no-unused-expressions
      chai.expect(res.body[0].school).to.not.be.undefined;
      chai.expect(res.body[0].name.length).to.at.least(2);
      chai.expect(res.status).to.equal(HttpStatusCodes.OK);
      return done();
    }));
});

const Redis = require("ioredis");
const { GenericContainer } = require("testcontainers");

describe("RedisTest", () => {
  let container;
  let redisClient;

  before(async () => {
    // "redis" is the name of the Docker imaage to download and run
    container = await new GenericContainer("redis")
      // exposes the internal Docker port to the host machine
      .withExposedPorts(6379)
      .start();

    redisClient = new Redis({
      host: container.getHost(),
      // retrieves the port on the host machine which maps
      // to the exposed port in the Docker container
      port: container.getMappedPort(6379),
    });
  });
});